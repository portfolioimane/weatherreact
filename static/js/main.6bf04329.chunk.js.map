{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","city","country","temperature","humidity","description","error","API_KEY","App","state","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAUeA,EARF,SAAAC,GAAK,OACjB,0BAAMC,SAAUD,EAAME,YACrB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCwBaC,EA5BC,SAAAN,GAAK,OACpB,yBAAKO,UAAU,iBAEbP,EAAMQ,MAAQR,EAAMS,SAAW,uBAAGF,UAAU,gBAAb,aAC9B,0BAAMA,UAAU,kBAAhB,IAAoCP,EAAMQ,KAA1C,KAAoDR,EAAMS,UAI3DT,EAAMU,aAAe,uBAAGH,UAAU,gBAAb,gBACpB,0BAAMA,UAAU,kBAAhB,IAAoCP,EAAMU,YAA1C,MAIDV,EAAMW,UAAY,uBAAGJ,UAAU,gBAAb,aACjB,0BAAMA,UAAU,kBAAhB,IAAoCP,EAAMW,SAA1C,MAIDX,EAAMY,aAAe,uBAAGL,UAAU,gBAAb,eACpB,0BAAMA,UAAU,kBAAhB,IAAoCP,EAAMY,YAA1C,MAIDZ,EAAMa,OAAS,uBAAGN,UAAU,kBAAmBP,EAAMa,SCrBlDC,G,MAAS,oCAwDAC,E,2MArDbC,MAAM,CACJN,YAAY,GACZF,KAAK,GACLC,QAAQ,GACRE,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAERX,W,uCAAa,WAAMe,GAAN,qBAAAC,EAAA,6DACXD,EAAEE,iBACIX,EAAKS,EAAEG,OAAOC,SAASb,KAAKc,MAC5Bb,EAAQQ,EAAEG,OAAOC,SAASZ,QAAQa,MAH7B,SAIaC,MAAM,oDAAD,OAAqDf,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,kBAJlB,cAIJU,EAJI,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMXC,QAAQC,IAAIF,GACTlB,GAAQC,EACX,EAAKoB,SAAS,CACdnB,YAAYgB,EAAKI,KAAKC,KACtBvB,KAAKkB,EAAKtB,KACVK,QAAQiB,EAAKM,IAAIvB,QACjBE,SAASe,EAAKI,KAAKnB,SACnBC,YAAYc,EAAKO,QAAQ,GAAGrB,YAC5BC,MAAM,KAGJ,EAAKgB,SAAS,CACZnB,YAAY,GAChBF,KAAK,GACLC,QAAQ,GACRE,SAAS,GACTC,YAAY,GACZC,MAAM,sBAvBK,4C,8HA4BX,OACE,yBAAKN,UAAU,WACf,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAML,WAAYgC,KAAKhC,aACvB,kBAAC,EAAD,CACGQ,YAAawB,KAAKlB,MAAMN,YACxBF,KAAM0B,KAAKlB,MAAMR,KACjBC,QAASyB,KAAKlB,MAAMP,QACpBE,SAAUuB,KAAKlB,MAAML,SACrBC,YAAasB,KAAKlB,MAAMJ,YACxBC,MAAOqB,KAAKlB,MAAMH,c,GA/CbsB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6bf04329.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.getWeather}>\r\n\t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n\t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n\t\t<button>Get Weather</button>\r\n\t</form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weather__info\">\r\n\t {\t\r\n\t \tprops.city && props.country && <p className=\"weather__key\"> Location: \r\n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \r\n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \r\n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.description && <p className=\"weather__key\"> Conditions: \r\n\t \t\t<span className=\"weather__value\"> { props.description } </span>\r\n\t </p> \r\n\t }\r\n\t { \r\n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \r\n\t }\r\n\t</div>\r\n);\r\n\r\nexport default Weather;","import React, {Component} from 'react';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport './App.css';\nconst API_KEY= \"9ef37d30e07fe3537ae04b7b4b08af28\";\n//http://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends Component {\n  state={\n    temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:''\n  }\n  getWeather = async(e) =>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n     const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    console.log(data);\n    if(city && country){\n    this.setState({\n    temperature:data.main.temp,\n    city:data.name,\n    country:data.sys.country,\n    humidity:data.main.humidity,\n    description:data.weather[0].description,\n    error:''\n    })\n    }else{\n      this.setState({\n        temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:'Please Enter Data'\n      })\n    }\n  }\n render () {\n    return (\n      <div className=\"wrapper\">\n      <div className=\"form-container\">\n          <Form getWeather={this.getWeather}/>\n          <Weather \n             temperature={this.state.temperature}\n             city={this.state.city}\n             country={this.state.country}\n             humidity={this.state.humidity}\n             description={this.state.description}\n             error={this.state.error}\n          />\n      </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}